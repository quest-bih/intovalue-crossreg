---
title: "Results manual validation"
format: html
editor: visual
---

# Introduction

# Dataset and packages

```{r message = FALSE, warning = FALSE}

final_data <- read.csv(here::here("data", "manual_validation_processed.csv"), sep = ",")

library(tidyverse)
library(stringr)
library(patchwork)
library(networkD3)
library(highcharter)
library(ggalluvial)
library(ggalt)
```

# Manual validation analysis

## Registry pair count

```{r message = FALSE, warning = FALSE}

final_data |>
  count(registry1, registry2) 
```

## Overall precision

```{r message = FALSE, warning = FALSE}

final_data |>
  count(is_true_crossreg) |>
  mutate(percentage = round(n / sum(n) * 100, 2))
```

## Precision by category

```{r message = FALSE, warning = FALSE}

final_data |>
  group_by(priority) |>
  count(is_true_crossreg) |>
  mutate(percentage = round(n / sum(n) * 100, 2))
```

## Count for Table 2

This section presents the number of pairs by registry (EUCTR-ClinicalTrials.gov or EUCTR-DRKS) through all the stages (suspected cross-registrations, manually screened cross-registrations and validated cross-registrations.

```{r message = FALSE, warning = FALSE}

trn_trn_table <- readRDS("~/Desktop/Research group Strech/cross-registration/official manual checks (11.09)/trn_manual_checks_11_09_2024.rds")
```

### Overall suspected cross-registratios (n = 625)

```{r message = FALSE, warning = FALSE}

filtered_table <- trn_trn_table |>
  filter(priority >= 1 & priority <= 4,
         drks_removed == FALSE,
         euctr_id_in_euctr == TRUE,
         trn2 != "2008-004408-29")

filtered_table |>
  filter(str_starts(trn1, "DRKS")) |>
  count(priority, name = "DRKS_count")

filtered_table |>
  filter(str_starts(trn2, "DRKS")) |>
  count(priority, name = "DRKS_count")

filtered_table |>
  filter(str_starts(trn1, "NCT")) |>
  count(priority, name = "NCT_count")

filtered_table |>
  filter(str_starts(trn2, "NCT")) |>
  count(priority, name = "NCT_count")
```

**Priority 1:** 9 DRKS, 100 NCT (109 total)

**Priority 2:** 51 DRKS, 310 NCT (361 total)

**Priority 3:** 1 DRKS, 124 NCT (125 total)

**Priority 4:** 1 DRKS, 29 NCT (30 total)

### Manually screened cross-registrations (n = 242)

```{r message = FALSE, warning = FALSE}

final_data |>
  group_by(priority) |>
  count(registry2)
```

### Validated cross-registrations (n = 233)

```{r message = FALSE, warning = FALSE}

final_data |>
  filter(is_true_crossreg == "TRUE") |>
  group_by(priority) |>
  count(registry2)
```

# Discrepancy analysis statistics

These analyses are going to be conducted in only the pairs that were considered `TRUE` cross-registrations

```{r message = FALSE, warning = FALSE}

discrepancy_data <- final_data |>
  filter(is_true_crossreg == "TRUE")
```

## Summary results

This analysis was limited to confirmed cross-registrations with a "Complete" recruitment status in both registries

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  count(registry2)
```

The analysis was conducted on 200 observations, from which 186 were EUCTR-ClinicalTrials.gov pairs, and 14 were EUCTR-DRKS pairs. No missing data was found in `has_summary_results`, for both main and sensitivity analyses.

### Percentages main analysis

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 1), "%)"))

#ClinicalTrials.gov
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "ClinicalTrials.gov") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 1), "%)"))

#DRKS
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "DRKS") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 1), "%)"))
```

### Percentages sensitivity analysis

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 1), "%)"))

#ClinicalTrials.gov
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "ClinicalTrials.gov") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 1), "%)"))

#DRKS
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "DRKS") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 1), "%)"))
```

## Recruitment status

This analysis was limited to confirmed cross-registrations with a recruitment status present in both registries, and according to our mapping (`overall_recruitment_status_reg1` and `overall_recruitment_status_reg2`).

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  count(overall_recruitment_status_reg1,
        overall_recruitment_status_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

Since there is no missing data on either registry, the analysis was done on 233 pairs of true cross-registered pairs.

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  count(registry2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

Of those 233 pairs, 218 were EUCTR-ClinicalTrials.gov and 15 were EUCTR-DRKS

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  count(overall_recruitment_status_reg1,
        overall_recruitment_status_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  count(overall_recruitment_status_reg1,
        overall_recruitment_status_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

## Completion date

### Count of observations included in the analysis

This is limited to confirmed cross-registrations with a date in both registries (i.e. when we had missing data in one or more registries, this was excluded from the analysis). Additionally, we filtered for overall recruitment status = Completed for both registries.

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg1))

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg2))
```

For registry1 (EUCTR), there were 192 pairs that were confirmed cross-registrations and no missing data on completion-date. For registry 2 (ClinicalTrials.gov or DRKS), the 200 observations had data. Therefore, the analysis was conducted in 192 pairs.

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg1))

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg1))
```

Of those 210 pairs, 178 were EUCTR-ClinicalTrials.gov and 14 were EUCTR-DRKS.

### Percentages

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1)) |>
  count(completion_month_year_reg1 == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1)) |>
  count(completion_month_year_reg1 == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1)) |>
  count(completion_month_year_reg1 == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

### Descriptive statistics of month differences

```{r message = FALSE, warning = FALSE}

#for all cases
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1)) |>
  mutate(
    completion_month_year_reg1 = ymd(paste0(completion_month_year_reg1, "-01")),
    completion_month_year_reg2 = ymd(paste0(completion_month_year_reg2, "-01")),
    month_difference = abs(interval(completion_month_year_reg1, 
                                    completion_month_year_reg2) / months(1))
    ) |>
  summarize(min_difference = min(month_difference, na.rm = TRUE),  
            max_difference = max(month_difference, na.rm = TRUE),
            median_difference = median(month_difference, na.rm = TRUE),  
            mean_difference = mean(month_difference, na.rm = TRUE),      
            sd_difference = sd(month_difference, na.rm = TRUE))

#for only discrepant cases
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(completion_month_year_reg1 != completion_month_year_reg2) |>
  filter(!is.na(completion_month_year_reg1)) |>
  mutate(
    completion_month_year_reg1 = ymd(paste0(completion_month_year_reg1, "-01")),
    completion_month_year_reg2 = ymd(paste0(completion_month_year_reg2, "-01")),
    month_difference = abs(interval(completion_month_year_reg1, 
                                    completion_month_year_reg2) / months(1))
    ) |>
  summarize(min_difference = min(month_difference, na.rm = TRUE),  
            max_difference = max(month_difference, na.rm = TRUE),
            median_difference = median(month_difference, na.rm = TRUE),  
            mean_difference = mean(month_difference, na.rm = TRUE),      
            sd_difference = sd(month_difference, na.rm = TRUE))
```

### Percentage of cases where EUCTR completion date was before/after/same

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_reg1)) |>
  mutate(date_comparison = case_when(
    completion_month_year_reg1 < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_reg1 > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)

#ClinicalTrials.gov
discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_reg1)) |>
  mutate(date_comparison = case_when(
    completion_month_year_reg1 < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_reg1 > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)

#DRKS
discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_reg1)) |>
  mutate(date_comparison = case_when(
    completion_month_year_reg1 < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_reg1 > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)
```

# Discrepancy analysis figures

## Summary results - main analysis

Summary results are gonna be analyzed only at the level of both registries having a completed recruitment status.

### **First draft**

```{r message = FALSE, warning = FALSE}

#filter data
summary_data <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed", 
         overall_recruitment_status_reg2 == "Completed") |>
  filter(registry1 == "EUCTR" & registry2 %in% c("ClinicalTrials.gov", "DRKS")) |>
  group_by(registry2) |>
  summarize(
    EUCTR_count = sum(has_summary_results_reg1_main == TRUE, na.rm = TRUE),
    other_registry_count = sum(has_summary_results_reg1_main == FALSE &
                               has_summary_results_reg2_main == TRUE, na.rm = TRUE)) |>
  pivot_longer(cols = c(EUCTR_count, other_registry_count), 
               names_to = "registry_part", values_to = "count") |>
  mutate(registry_part = case_when(
    registry_part == "EUCTR_count" ~ "EUCTR",
    registry_part == "other_registry_count" ~ registry2)) |>
  mutate(registry_part = factor(registry_part, levels = c("EUCTR", 
                                                          "ClinicalTrials.gov", 
                                                          "DRKS")))

#create plot
ggplot() +
  geom_bar(data = summary_data,
           aes(x = registry2, y = count, fill = registry_part),
           stat = "identity", position = position_stack(reverse = TRUE)) +
  geom_text(data = summary_data |> filter(count > 0), 
            aes(x = registry2, y = count, label = count, group = registry_part), 
            position = position_stack(vjust = 0.5, reverse = TRUE), 
            color = "black", size = 4) +
  scale_fill_manual(values = c("EUCTR" = "darkgrey", 
                               "ClinicalTrials.gov" = "lightgrey", 
                               "DRKS" = "lightgrey")) + 
  labs(x = "Registry Combination", y = "Count of Summary Results", fill = "Registry") +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) + 
  theme_classic() +
  theme(legend.position = "top")
```

### **Count version (%)**

```{r message = FALSE, warning = FALSE}

#prepare data
summary_data2 <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 1), "%)"))

#plot
ggplot(data = summary_data2, aes(x = registry2, y = count, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "Registry combination", y = "Count of Summary Results", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgrey", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 200), 
                     breaks = seq(0, 200, by = 20)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) + 
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "top")
```

### **Version with % on y-axis**

```{r message = FALSE, warning = FALSE}

#prepare data
summary_data3 <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
      has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
      has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
      has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
      has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percent = count / sum(count) * 100) |>
  mutate(label = paste0(round(percent, 1), "% (n = ", count, ")"))  

#plot
ggplot(data = summary_data3, aes(x = registry2, y = percent, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), 
            position = position_stack(vjust = 0.5), size = 3.5) +  
  labs(x = "Registry combination", y = "Percentage of Summary Results", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "top")
```

Here with percentages the information that is lost is the difference in n between EUCTR-ClinicalTrials.gov and EUCTR-DRKS. One option is to use the count plot, the other is to create these percentage plots separately for each plot:

```{r message = FALSE, warning = FALSE}

#ClinicalTrials.gov
summary_data3 |>
  filter(registry2 == "ClinicalTrials.gov") |>
  mutate(result_label = factor(result_label, levels = result_label[order(-percent)])) |>
  ggplot(aes(x = result_label, y = percent, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(percent, 1), "%")), 
            position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "Summary results EUCTR - ClinicalTrials.gov", y = "Percentage") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "none")

#DRKS
summary_data3 |>
  filter(registry2 == "DRKS") |>
  mutate(result_label = factor(result_label, levels = result_label[order(-percent)])) |>
  ggplot(aes(x = result_label, y = percent, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(percent, 1), "%")), 
            position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "Summary results EUCTR - DRKS", y = "Percentage") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "none")
```

## Summary results - sensitivity analysis

### Count version

```{r message = FALSE, warning = FALSE}

#prepare data
summary_data4 <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 1), "%)"))

#plot
ggplot(data = summary_data4, aes(x = registry2, y = count, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "Registry combination", y = "Count of Summary Results", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgrey", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 200), 
                     breaks = seq(0, 200, by = 20)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) + 
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "top")
```

### Version with % on y-axis

```{r message = FALSE, warning = FALSE}

#prepare data
summary_data5 <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
      has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
      has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
      has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
      has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Other registry"),
    result_label = factor(result_label, levels = c("Other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percent = count / sum(count) * 100) |>
  mutate(label = paste0(round(percent, 1), "% (n = ", count, ")"))  

#plot
ggplot(data = summary_data5, aes(x = registry2, y = percent, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), 
            position = position_stack(vjust = 0.5), size = 3.5) + 
  labs(x = "Registry combination", y = "Percentage of Summary Results", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "top")
```

## 2-pane plot with main and sensitivity analysis

### With count y-axis

```{r message = FALSE, warning = FALSE}

#create plot objects
plot1 <- ggplot(data = summary_data2, aes(x = registry2, y = count, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "Main analysis", y = "Count of Summary Results", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgrey", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 200), 
                     breaks = seq(0, 200, by = 20)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) + 
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "none")

plot2 <- ggplot(data = summary_data4, aes(x = registry2, y = count, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "Sensitivity analysis", y = "Count of Summary Results", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgrey", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 200), 
                     breaks = seq(0, 200, by = 20)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) + 
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "right")

#combine
combined_plot <- plot1 + plot2 + plot_layout(ncol = 2)
print(combined_plot)
```

### With % y-axis

```{r message = FALSE, warning = FALSE}

plot3 <- ggplot(data = summary_data3, aes(x = registry2, y = percent, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), 
            position = position_stack(vjust = 0.5), size = 3.5) +  # Use updated label
  labs(x = "Main analysis", y = "Percentage", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "none")

plot4 <- ggplot(data = summary_data5, aes(x = registry2, y = percent, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), 
            position = position_stack(vjust = 0.5), size = 3.5) +  # Use updated label
  labs(x = "Sensitivity analysis", y = "Percentage", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "right")
  
combined_plot2 <- plot3 + plot4 + plot_layout(ncol = 2)
print(combined_plot2)
```

```{r message = FALSE, warning = FALSE}

#plot EUCTR-ClinicalTrials.gov
plot_clinicaltrials <- ggplot(
  data = bind_rows(
    summary_data3 %>% filter(registry2 == "ClinicalTrials.gov") %>% mutate(analysis_type = "Main"),
    summary_data5 %>% filter(registry2 == "ClinicalTrials.gov") %>% mutate(analysis_type = "Sensitivity")
  ),
  aes(x = analysis_type, y = percent, fill = result_label)
) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "EUCTR - ClinicalTrials.gov", y = "Percentage", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "left")

#plot EUCTR-DRKS
plot_drks <- ggplot(
  data = bind_rows(
    summary_data3 %>% filter(registry2 == "DRKS") %>% mutate(analysis_type = "Main"),
    summary_data5 %>% filter(registry2 == "DRKS") %>% mutate(analysis_type = "Sensitivity")
  ),
  aes(x = analysis_type, y = percent, fill = result_label)
) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "EUCTR - DRKS", y = "Percentage", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2066a8", 
                               "Both" = "#3594cc", 
                               "Other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "none")

#combine plots
combined_plot2 <- plot_clinicaltrials + plot_drks + plot_layout(ncol = 2)
print(combined_plot2)
```

## Recruitment status

### Sankey plot version 1

To create the data for the sankey plot, I added a source and target columns with the required values

```{r message = FALSE, warning = FALSE}

#create source column
discrepancy_data <- discrepancy_data |>
  mutate(sankey_source = paste("EUCTR", overall_recruitment_status_reg1))

#create target column
discrepancy_data <- discrepancy_data |>
  mutate(sankey_target = case_when(
    registry2 == "ClinicalTrials.gov" ~ paste("ClinicalTrials.gov", overall_recruitment_status_reg2),
    registry2 == "DRKS" ~ paste("DRKS", overall_recruitment_status_reg2)
  ))

#filter data for sankey plot: 
sankey_data <- discrepancy_data |> 
  count(sankey_source, sankey_target)
```

```{r message = FALSE, warning = FALSE}

#OPTION 1

#node list
nodes <- data.frame(name = unique(c(sankey_data$sankey_source, sankey_data$sankey_target)))

#links
sankey_data$IDsource <- match(sankey_data$sankey_source, nodes$name) - 1
sankey_data$IDtarget <- match(sankey_data$sankey_target, nodes$name) - 1

links <- data.frame(source = sankey_data$IDsource,
                    target = sankey_data$IDtarget,
                    value = sankey_data$n)

#sankey plot
sankeyNetwork(Links = links, Nodes = nodes, 
              Source = "source", Target = "target", 
              Value = "value", NodeID = "name", 
              fontSize = 12, nodeWidth = 30)
```

### Sankey plot version 2

```{r message = FALSE, warning = FALSE}

#OPTION 2

sankey_data2 <- discrepancy_data |>
  select(registry1, registry2, 
         overall_recruitment_status_reg1, 
         overall_recruitment_status_reg2) |>
  mutate(overall_recruitment_status_reg1 = paste("EUCTR", overall_recruitment_status_reg1),
         overall_recruitment_status_reg2 = ifelse(
           registry2 == "ClinicalTrials.gov",
           paste("ClinicalTrials.gov", overall_recruitment_status_reg2),
           paste("DRKS", overall_recruitment_status_reg2)
    )) |>
  select(-registry1, -registry2)
  
hchart(data_to_sankey(sankey_data2), "sankey", name = "Count") |>
  hc_add_theme(hc_theme_economist())
```

**Replicating results with numbers from `discrepancy_data`:**

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  count(overall_recruitment_status_reg1)

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  count(overall_recruitment_status_reg2)

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  count(overall_recruitment_status_reg2)
```

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  group_by(registry2) |>
  count(overall_recruitment_status_reg1, overall_recruitment_status_reg2)
```

### Alluvial plot

```{r message = FALSE, warning = FALSE}

sankey_data2 |>
  count(overall_recruitment_status_reg1, overall_recruitment_status_reg2) |>
  ggplot(aes(axis1 = overall_recruitment_status_reg1, 
             axis2 = overall_recruitment_status_reg2, y = n)) +
  geom_alluvium(aes(fill = overall_recruitment_status_reg1), width = 0.1) +
  geom_stratum(width = 0.2, fill = "#FAFAFA", color = "black") +
  geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.5) +
  scale_x_discrete(limits = c("EUCTR", "Other Registry"), expand = c(0.15, 0.15)) +
  scale_y_continuous(limits = c(0, 240), breaks = seq(0, 240, by = 20)) +
  scale_fill_manual(values = c("#AED6E8", "#F9ACB1")) + 
  labs(title = "Recruitment status match between EUCTR and second registry",
       x = "Registry",
       y = "Number of Observations") +
  theme_classic() +
  theme(legend.position = "none",
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
```

```{r message = FALSE, warning = FALSE}

sankey_data2 |>
  count(overall_recruitment_status_reg1, overall_recruitment_status_reg2)
```

## Completion date

### Version 1 (all cases)

```{r message = FALSE, warning = FALSE}

#ClinicalTrials.gov plot
discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"),
                                              format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"),
                                              format = "%Y-%m-%d")) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",    
                colour_xend = "#8cc5e3") +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +  
  labs(x = "Year of completion",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y")

#DRKS plot
discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  mutate(
    completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"), format = "%Y-%m-%d"),
    completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"), format = "%Y-%m-%d")
  ) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",    
                colour_xend = "#8cc5e3") +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +  
  labs(x = "Year of completion",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") 
```

**Observations:**

-   Low n makes the graph clear. EUCTR-ClinicalTrials.gov is very overcrowded.

-   It would be nice to figure out a way to make pairs that match have a different color, here they just maintain the color of registry2.

**Another suggestion:** make in the text of the paper a count of how many times the registries matched: EUCTR-ClinicalTrials.gov and EUCTR-DRKS. Then add these figures to analyze only cases were the dates did not match. Also account for NA cases that were excluded from analysis.

### Version 2 (only no-match pairs)

```{r message = FALSE, warning = FALSE}

#ClinicalTrials.gov plot
discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  filter(completion_month_year_reg1 != completion_month_year_reg2) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"),
                                              format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"),
                                              format = "%Y-%m-%d")) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",    
                colour_xend = "#8cc5e3") +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +  
  labs(x = "Year of completion",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y")

#DRKS plot
discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  filter(completion_month_year_reg1 != completion_month_year_reg2) |>
  mutate(
    completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"), format = "%Y-%m-%d"),
    completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"), format = "%Y-%m-%d")
  ) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",    
                colour_xend = "#8cc5e3") +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +  
  labs(x = "Year of completion",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") 
```

### Version 3 (organized by diff)

**Organized by difference between `completion_month_year_reg1` and `completion_month_year_reg2` on y-axis:**

```{r message = FALSE, warning = FALSE}

#ClinicalTrials.gov
discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  filter(completion_month_year_reg1 != completion_month_year_reg2) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"),
                                              format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"),
                                              format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_reg1)) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "top") +  
  labs(x = "Year of completion",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") + #adding labels
  geom_point(aes(x = as.Date(NA), y = NA, color = "EUCTR"), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = "ClinicalTrials.gov"), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "ClinicalTrials.gov" = "#8cc5e3")) +
  guides(color = guide_legend(override.aes = list(size = 3)))

#DRKS
discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  filter(completion_month_year_reg1 != completion_month_year_reg2) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"),
                                              format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"),
                                              format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_reg1)) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "top") +  
  labs(x = "Year of completion",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") + #adding labels
  geom_point(aes(x = as.Date(NA), y = NA, color = "EUCTR"), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = "DRKS"), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "DRKS" = "#8cc5e3")) +
  guides(color = guide_legend(override.aes = list(size = 3)))
```

**Example paragraph:**

Out of the 233 true cross-registered pairs of TRN, 94 matched in completion date with same year and month (ClinicalTrials.gov = 86; DRKS = 8), 115 did not match on completion date (ClinicalTrials.gov = 109; DRKS = 6), and 24 pairs were not compared due to missing information of completion date (*these 24 are only from EUCTR*; ClinicalTrials.gov =23; DRKS = 1). Figure X. shows the difference in completion date within the 115 pairs that did not match.

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  count(completion_month_year_reg1 == completion_month_year_reg2)

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  count(completion_month_year_reg1 == completion_month_year_reg2)
```

### Version 3 combined plot

```{r message = FALSE, warning = FALSE}

completion_ctgov_plot <- discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  filter(completion_month_year_reg1 != completion_month_year_reg2) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"),
                                              format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"),
                                              format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_reg1)) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "top") +  
  labs(x = "Year of completion\n(EUCTR - ClinicalTrials.gov)",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") + #adding labels
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("EUCTR", levels = c("EUCTR", "ClinicalTrials.gov"))), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("ClinicalTrials.gov", levels = c("EUCTR", "ClinicalTrials.gov"))), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "ClinicalTrials.gov" = "#8cc5e3"),
                     labels = c("EUCTR", "Other registry")) +
  guides(color = guide_legend(override.aes = list(size = 3)))

completion_drks_plot <- discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  filter(completion_month_year_reg1 != completion_month_year_reg2) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"),
                                              format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"),
                                              format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_reg1)) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none") +  
  labs(x = "Year of completion\n(EUCTR - DRKS)",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") + #adding labels
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("EUCTR", levels = c("EUCTR", "DRKS"))), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("DRKS", levels = c("EUCTR", "DRKS"))), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "DRKS" = "#8cc5e3"),
                     labels = c("EUCTR", "Other registry")) +
  guides(color = guide_legend(override.aes = list(size = 3)))

#combined plot
completion_combined_plot <- completion_ctgov_plot + completion_drks_plot + plot_layout(nrow =  2)
print(completion_combined_plot)
```

### Combined plot with all observations

```{r message = FALSE, warning = FALSE}

#plot for clinical trials, with addition of new layers for the matching observations
all_obs_ctgov <- discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"), format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"), format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_reg1),
         is_equal = completion_month_year_reg1 == completion_month_year_reg2) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  geom_point(data = . %>% filter(is_equal),
             aes(x = completion_month_year_reg1, shape = "Both match"),
             color = "#e79f31", 
             size = 3.3) +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "top") +  
  labs(x = "Year of completion\n(EUCTR - ClinicalTrials.gov)",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("EUCTR", levels = c("EUCTR", "ClinicalTrials.gov"))), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("ClinicalTrials.gov", levels = c("EUCTR", "ClinicalTrials.gov"))), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "ClinicalTrials.gov" = "#8cc5e3"),
                     labels = c("EUCTR", "Other registry")) +
  scale_shape_manual(values = c("Both match" = 16), labels = c("Both match" = "Both match")) +
  guides(color = guide_legend(order = 1, override.aes = list(size = 3)),
         shape = guide_legend(order = 2, title = NULL))

#plot for drks without adding the labels but with the new color layer: 
all_obs_drks <- discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"), format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"), format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_reg1),
         is_equal = completion_month_year_reg1 == completion_month_year_reg2) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  geom_point(data = . %>% filter(is_equal),
             aes(x = completion_month_year_reg1),
             shape = 16,  
             color = "#e79f31", 
             size = 3.3) +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none") +  
  labs(x = "Year of completion\n(EUCTR - DRKS)",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("EUCTR", levels = c("EUCTR", "DRKS"))), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("DRKS", levels = c("EUCTR", "DRKS"))), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "DRKS" = "#8cc5e3"),
                     labels = c("EUCTR", "Other registry")) +
  guides(color = guide_legend(override.aes = list(size = 3)))

#combine plot
completion_combined_plot2 <- all_obs_ctgov + all_obs_drks + plot_layout(nrow =  2)
print(completion_combined_plot2)
```

### Sensitivity analysis completion date

Sensitivity analysis of completion date present in the German member state protocol, instead of the result section. We used data from euctr data dump to retrieve the completion date from protocols.

#### Load data dump euctr

```{r message = FALSE, warning = FALSE}

euctr_data <- read.csv(here::here("data", "euctr_dump.csv"), sep = ",")
```

#### Check that all trn from discrepancy_data are included in euctr_data

```{r message = FALSE, warning = FALSE}

#some trn1 may have spaces before/after, 
#they will be removed from both datasets to ensure full match
discrepancy_data <- discrepancy_data |>
  mutate(trn1 = str_replace_all(trn1, " ", ""))

euctr_data <- euctr_data |>
  mutate(eudract_number = str_replace_all(eudract_number, " ", ""))

#check that all trn1 from final_data are in euctr_data
missing_trn1 <- setdiff(discrepancy_data$trn1, euctr_data$eudract_number)

if (length(missing_trn1) == 0) {
  cat("All trn1 values are included in eudract_number.\n")
} else {
  cat("The following trn1 values are missing from eudract_number:\n")
  print(missing_trn1)
}
```

#### Selecting completion_date from euctr_data

```{r message = FALSE, warning = FALSE}

#select data of interest from euctr dump dataset
euctr_data_filtered <- euctr_data |>
  select(eudract_number_with_country, eudract_number, date_of_the_global_end_of_the_trial) |>
  filter(eudract_number %in% discrepancy_data$trn1, 
         str_detect(eudract_number_with_country, "DE"))
```

When filtering **euctr_data**, we get 227 but **discrepancy_data** has 233.

Further investigation on duplicates in **discrepancy_data** is needed:

```{r message = FALSE, warning = FALSE}

#identify missing cases
discrepancy_data |>
  filter(!trn1 %in% euctr_data_filtered$eudract_number) |>
  select(trn1, general_comment)

#I get 6 missing IDs, all not having DE protocol.
```

#### Adding new completion date to discrepancy data

```{r message = FALSE, warning = FALSE}

#add data from date_of_the_global_end_of_the_trial to final_data
discrepancy_data <- discrepancy_data |>
  left_join(euctr_data_filtered |>
      select(eudract_number, 
             completion_date_protocol = date_of_the_global_end_of_the_trial),
             by = c("trn1" = "eudract_number"))
```

#### Missing data (both NA and empty cells) for new variable

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  summarise(
    missing_count = sum(is.na(completion_date_protocol) | completion_date_protocol == ""),
    total_rows = n()
  ) |>
  mutate(missing_percentage = (missing_count / total_rows) * 100)
```

#### Create new variable month_year for completion_date_protocol

```{r message = FALSE, warning = FALSE}

discrepancy_data <- discrepancy_data |>
  mutate(completion_month_year_protocol = format(as.Date(completion_date_protocol, 
                                                         format = "%Y-%m-%d"), "%Y-%m")) |>
  relocate(completion_month_year_protocol, .after = completion_date_protocol)
```

#### Count of observations per registry

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_protocol))

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg2))
```

#### Percentages

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(!is.na(completion_month_year_protocol)) |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(completion_month_year_protocol == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_protocol)) |>
  count(completion_month_year_protocol == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_protocol)) |>
  count(completion_month_year_protocol == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

#### Descriptive statistics

```{r message = FALSE, warning = FALSE}

#for all cases
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_protocol)) |>
  mutate(
    completion_month_year_protocol = ymd(paste0(completion_month_year_protocol, "-01")),
    completion_month_year_reg2 = ymd(paste0(completion_month_year_reg2, "-01")),
    month_difference = abs(interval(completion_month_year_protocol, 
                                    completion_month_year_reg2) / months(1))
    ) |>
  summarize(min_difference = min(month_difference, na.rm = TRUE),  
            max_difference = max(month_difference, na.rm = TRUE),
            median_difference = median(month_difference, na.rm = TRUE),  
            mean_difference = mean(month_difference, na.rm = TRUE),      
            sd_difference = sd(month_difference, na.rm = TRUE))

#for only discrepant cases
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(completion_month_year_protocol != completion_month_year_reg2) |>
  filter(!is.na(completion_month_year_protocol)) |>
  mutate(
    completion_month_year_protocol = ymd(paste0(completion_month_year_protocol, "-01")),
    completion_month_year_reg2 = ymd(paste0(completion_month_year_reg2, "-01")),
    month_difference = abs(interval(completion_month_year_protocol, 
                                    completion_month_year_reg2) / months(1))
    ) |>
  summarize(min_difference = min(month_difference, na.rm = TRUE),  
            max_difference = max(month_difference, na.rm = TRUE),
            median_difference = median(month_difference, na.rm = TRUE),  
            mean_difference = mean(month_difference, na.rm = TRUE),      
            sd_difference = sd(month_difference, na.rm = TRUE))
```

#### Percentage of cases where EUCTR completion date was before DRKS/CTgov

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_protocol)) |>
  mutate(date_comparison = case_when(
    completion_month_year_protocol < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_protocol > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)

#ClinicalTrials.gov
discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_protocol)) |>
  mutate(date_comparison = case_when(
    completion_month_year_protocol < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_protocol > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)

#DRKS
discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_protocol)) |>
  mutate(date_comparison = case_when(
    completion_month_year_protocol < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_protocol > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)
```

#### Replication of completion date graph

```{r message = FALSE, warning = FALSE}

#ClinicalTrials.gov with updated variable
all_obs_ctgov <- discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_protocol) & !is.na(completion_month_year_reg2)) |>
  mutate(completion_month_year_protocol = as.Date(paste0(completion_month_year_protocol, "-01"), format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"), format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_protocol),
         is_equal = completion_month_year_protocol == completion_month_year_reg2) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_protocol,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  geom_point(data = . %>% filter(is_equal),
             aes(x = completion_month_year_protocol, shape = "Both match"),
             color = "#e79f31", 
             size = 3.3) +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "top") +  
  labs(x = "Year of completion\n(EUCTR - ClinicalTrials.gov)",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("EUCTR", levels = c("EUCTR", "ClinicalTrials.gov"))), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("ClinicalTrials.gov", levels = c("EUCTR", "ClinicalTrials.gov"))), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "ClinicalTrials.gov" = "#8cc5e3"),
                     labels = c("EUCTR", "Other registry")) +
  scale_shape_manual(values = c("Both match" = 16), labels = c("Both match" = "Both match")) +
  guides(color = guide_legend(order = 1, override.aes = list(size = 3)),
         shape = guide_legend(order = 2, title = NULL))

#DRKS with updated variable
all_obs_drks <- discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_protocol) & !is.na(completion_month_year_reg2)) |>
  mutate(completion_month_year_protocol = as.Date(paste0(completion_month_year_protocol, "-01"), format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"), format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_protocol),
         is_equal = completion_month_year_protocol == completion_month_year_reg2) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_protocol,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  geom_point(data = . %>% filter(is_equal),
             aes(x = completion_month_year_protocol),
             shape = 16,  
             color = "#e79f31", 
             size = 3.3) +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none") +  
  labs(x = "Year of completion\n(EUCTR - DRKS)",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("EUCTR", levels = c("EUCTR", "DRKS"))), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("DRKS", levels = c("EUCTR", "DRKS"))), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "DRKS" = "#8cc5e3"),
                     labels = c("EUCTR", "Other registry")) +
  guides(color = guide_legend(override.aes = list(size = 3)))

#combined plot
completion_combined_plot2 <- all_obs_ctgov + all_obs_drks + plot_layout(nrow =  2)
print(completion_combined_plot2)
```
