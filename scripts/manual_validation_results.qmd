---
title: "Results manual validation"
format: html
editor: visual
---

# Dataset and packages

```{r message = FALSE, warning = FALSE}

library(tidyverse)
library(here)
library(ctregistries)
library(patchwork)
library(ggalt)

final_data <- read_csv(here::here("data", "manual_validation_processed.csv"))
```

# Manual validation analysis

## Registry pair count

```{r message = FALSE, warning = FALSE}

final_data |>
  count(registry1, registry2) 
```

## Overall precision

```{r message = FALSE, warning = FALSE}

final_data |>
  count(is_true_crossreg) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

## Precision by category

```{r message = FALSE, warning = FALSE}

final_data |>
  group_by(priority) |>
  count(is_true_crossreg) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

## Count for Table 2

This section presents the number of pairs by registry (EUCTR-ClinicalTrials.gov or EUCTR-DRKS) through all the stages (suspected cross-registrations, manually screened cross-registrations and validated cross-registrations.

```{r message = FALSE, warning = FALSE}

trn_trn_table <- readRDS(here::here("data", "crossreg_pipeline_output.rds"))
```

### Overall suspected cross-registrations (n = 625)

```{r message = FALSE, warning = FALSE}

filtered_table <- trn_trn_table |>
  filter(priority >= 1 & priority <= 4, #select priorities with over 50% precision in pilot
         drks_removed == FALSE,         #remove TRNs from trials deleted from DRKS registry
         euctr_id_in_euctr == TRUE,     #select TRNs that resolve in EUCTR registry
         trn2 != "2008-004408-29")      #exclude one additional non-resolving TRN from EUCTR

#count of non-euctr trns
filtered_table |> 
    rowwise() |> 
    mutate(
        registry1 = ctregistries::which_registry(trn1),
        registry2 = ctregistries::which_registry(trn2),
        non_euctr_registry = if_else(registry1 == "EudraCT", registry2, registry1)
        ) |>
    count(non_euctr_registry, priority)
```

**Priority 1:** 9 DRKS, 100 NCT (109 total)

**Priority 2:** 51 DRKS, 310 NCT (361 total)

**Priority 3:** 1 DRKS, 124 NCT (125 total)

**Priority 4:** 1 DRKS, 29 NCT (30 total)

### Manually screened cross-registrations (n = 242)

```{r message = FALSE, warning = FALSE}

final_data |>
    count(priority, registry2)
```

### Validated cross-registrations (n = 232)

```{r message = FALSE, warning = FALSE}

final_data |>
  filter(is_true_crossreg == "TRUE") |>
  count(priority, registry2)
```

# Discrepancy analysis

The following analyses are going to be conducted only with the pairs that were considered **true cross-registrations**.

```{r message = FALSE, warning = FALSE}

discrepancy_data <- final_data |>
  filter(is_true_crossreg == "TRUE")
```

# Summary results

This analysis was limited to confirmed cross-registrations with a "`Completed`" overall recruitment status in both registries

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  count(registry2)
```

The analysis was conducted on 199 observations, from which 185 were EUCTR-ClinicalTrials.gov pairs, and 14 were EUCTR-DRKS pairs. No missing data was found in `has_summary_results`, for both main and sensitivity analyses.

## Descriptive statistics

### Main analysis

For the main analysis, summary results were considered as reported (i.e. `has_summary_results_reg1_main == TRUE` or `has_summary_results_reg2_main == TRUE`) if a structure tabular result was available in the registry. Then the results were classified on the following categories:

1.  Results reported only in EUCTR

2.  Results reported in both registries

3.  Results reported only on the other registry (DRKS or ClinicalTrials.gov)

4.  No results reported in both registries

The count and percentage of each category was reported.

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))

#ClinicalTrials.gov
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "ClinicalTrials.gov") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))

#DRKS
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "DRKS") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
    has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))
```

### First sensitivity analysis

For the sensitivity analysis, summary results were considered as reported (i.e. `has_summary_results_reg1_sensitivity == TRUE` or `has_summary_results_reg2_sensitivity == TRUE`) if any of the following were available in the summary results section:

-   Structured tabular result

-   Link to a file that reported results (such as synopsis, study reports, etc.)

-   Link to a termination statement

-   Link to a publication citation

-   Link to publication or abstract

For ClinicalTrials.gov, the main and first sensitivity analysis are the same, since other formats can't be uploaded in the results overview section. Only in the second sensitivity analysis we consider publication links from ClinicalTrials.gov

The results were classified in the same categories as the main analysis. The count and percentage were reported.

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))

#ClinicalTrials.gov
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "ClinicalTrials.gov") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))

#DRKS
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "DRKS") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))
```

### Second sensitivity analysis

This analysis extends the first sensitivity analysis to also included any publication link in ClinicalTrials.gov that was available in the publication section.

#### Percentages

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity_v2 == FALSE & has_summary_results_reg2_sensitivity_v2 == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity_v2 == TRUE & has_summary_results_reg2_sensitivity_v2 == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity_v2 == TRUE & has_summary_results_reg2_sensitivity_v2 == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity_v2 == FALSE & has_summary_results_reg2_sensitivity_v2 == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))

#ClinicalTrials.gov
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "ClinicalTrials.gov") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity_v2 == FALSE & has_summary_results_reg2_sensitivity_v2 == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity_v2 == TRUE & has_summary_results_reg2_sensitivity_v2 == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity_v2 == TRUE & has_summary_results_reg2_sensitivity_v2 == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity_v2 == FALSE & has_summary_results_reg2_sensitivity_v2 == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))

#DRKS
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         registry2 == "DRKS") |>
  mutate(result_label = case_when(
    has_summary_results_reg1_sensitivity_v2 == FALSE & has_summary_results_reg2_sensitivity_v2 == FALSE ~ "No results",
    has_summary_results_reg1_sensitivity_v2 == TRUE & has_summary_results_reg2_sensitivity_v2 == FALSE ~ "Only EUCTR",
    has_summary_results_reg1_sensitivity_v2 == TRUE & has_summary_results_reg2_sensitivity_v2 == TRUE ~ "Both",
    has_summary_results_reg1_sensitivity_v2 == FALSE & has_summary_results_reg2_sensitivity_v2 == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  mutate(percentage = count / sum(count) * 100) |>
  mutate(label = paste0(count, " (", round(percentage, 0), "%)"))
```

## Figures

### Summary results - main and first sensitivity analysis

```{r message = FALSE, warning = FALSE}

#prepare data main analysis
summary_data_main <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
      has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
      has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
      has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
      has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percent = count / sum(count) * 100) |>
  mutate(label = paste0(round(percent, 0), "% (n = ", count, ")"))  

#prepare data sensitivity analysis
summary_data_sens <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
      has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
      has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
      has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
      has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percent = count / sum(count) * 100) |>
  mutate(label = paste0(round(percent, 0), "% (n = ", count, ")"))  

#create 2-pane plot
plot1 <- ggplot(data = summary_data_main, aes(x = registry2, y = percent, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), 
            position = position_stack(vjust = 0.5), size = 3.5) +  
  labs(x = "Main analysis", y = "Percentage", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2577c5", 
                               "Both" = "#3594cc", 
                               "Only other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "none")

plot2 <- ggplot(data = summary_data_sens, aes(x = registry2, y = percent, fill = result_label)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = label), 
            position = position_stack(vjust = 0.5), size = 3.5) +  
  labs(x = "Sensitivity analysis", y = "Percentage", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2577c5", 
                               "Both" = "#3594cc", 
                               "Only other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 101), breaks = seq(0, 100, by = 10)) +
  scale_x_discrete(labels = c("ClinicalTrials.gov" = "EUCTR-ClinicalTrials.gov", 
                              "DRKS" = "EUCTR-DRKS")) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "right")
  
combined_plot_summary <- plot1 + plot2 + plot_layout(ncol = 2)
print(combined_plot_summary)
```

### Summary results - main, first sensitivity and second sensitivity analysis

```{r message = FALSE, warning = FALSE}

#prepare data main analysis
main_data_summary <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
      has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == FALSE ~ "No results",
      has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == FALSE ~ "Only EUCTR",
      has_summary_results_reg1_main == TRUE & has_summary_results_reg2_main == TRUE ~ "Both",
      has_summary_results_reg1_main == FALSE & has_summary_results_reg2_main == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percent = count / sum(count) * 100) |>
  mutate(label = paste0(round(percent, 0), "% (n = ", count, ")"))  

#prepare data sensitivity analysis
sensitivity_data_summary <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
      has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == FALSE ~ "No results",
      has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == FALSE ~ "Only EUCTR",
      has_summary_results_reg1_sensitivity == TRUE & has_summary_results_reg2_sensitivity == TRUE ~ "Both",
      has_summary_results_reg1_sensitivity == FALSE & has_summary_results_reg2_sensitivity == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percent = count / sum(count) * 100) |>
  mutate(label = paste0(round(percent, 0), "% (n = ", count, ")")) 

#prepare data sensitivity v2 analysis
sensitivity_data_summary_v2 <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed") |>
  mutate(result_label = case_when(
      has_summary_results_reg1_sensitivity_v2 == FALSE & has_summary_results_reg2_sensitivity_v2 == FALSE ~ "No results",
      has_summary_results_reg1_sensitivity_v2 == TRUE & has_summary_results_reg2_sensitivity_v2 == FALSE ~ "Only EUCTR",
      has_summary_results_reg1_sensitivity_v2 == TRUE & has_summary_results_reg2_sensitivity_v2 == TRUE ~ "Both",
      has_summary_results_reg1_sensitivity_v2 == FALSE & has_summary_results_reg2_sensitivity_v2 == TRUE ~ "Only other registry"),
    result_label = factor(result_label, levels = c("Only other registry", "Both", "Only EUCTR", "No results"))) |>
  group_by(registry2, result_label) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(registry2) |>
  mutate(percent = count / sum(count) * 100) |>
  mutate(label = paste0(round(percent, 0), "% (n = ", count, ")"))

#create 2-pane plot 

plot3 <- ggplot(
  data = bind_rows(
    main_data_summary %>% filter(registry2 == "ClinicalTrials.gov") %>% mutate(analysis_type = "Main"),
    sensitivity_data_summary %>% filter(registry2 == "ClinicalTrials.gov") %>% mutate(analysis_type = "Sensitivity 1"),
    sensitivity_data_summary_v2 %>% filter(registry2 == "ClinicalTrials.gov") %>% mutate(analysis_type = "Sensitivity 2")),
  aes(x = analysis_type, y = percent, fill = result_label)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "EUCTR - ClinicalTrials.gov", y = "Percentage", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2577c5", 
                               "Both" = "#3594cc", 
                               "Only other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 101), breaks = seq(0, 100, by = 10)) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "left")

plot4 <- ggplot(
  data = bind_rows(
    main_data_summary %>% filter(registry2 == "DRKS") %>% mutate(analysis_type = "Main"),
    sensitivity_data_summary %>% filter(registry2 == "DRKS") %>% mutate(analysis_type = "Sensitivity 1"),
    sensitivity_data_summary_v2 %>% filter(registry2 == "DRKS") %>% mutate(analysis_type = "Sensitivity V2")),
  aes(x = analysis_type, y = percent, fill = result_label)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3.5) +
  labs(x = "EUCTR - DRKS", y = "Percentage", fill = "Results") +
  scale_fill_manual(values = c("No results" = "lightgray", 
                               "Only EUCTR" = "#2577c5", 
                               "Both" = "#3594cc", 
                               "Only other registry" = "#8cc5e3")) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
  theme_classic() +
  theme(axis.text = element_text(size = 10),
        legend.position = "none")

#combine plots
combined_plot_summary2 <- plot3 + plot4 + plot_layout(ncol = 2)
print(combined_plot_summary2)
```

# Recruitment status

## Descriptive statistics

This analysis was limited to confirmed cross-registrations with a recruitment status present in both registries, and according to our mapping (`overall_recruitment_status_reg1` and `overall_recruitment_status_reg2`).

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  count(overall_recruitment_status_reg1,
        overall_recruitment_status_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

Since there is no missing data on either registry, the analysis was done on 232 pairs of true cross-registered pairs.

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  count(registry2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

Of those 232 pairs, 217 were EUCTR-ClinicalTrials.gov and 15 were EUCTR-DRKS

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  count(overall_recruitment_status_reg1,
        overall_recruitment_status_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  count(overall_recruitment_status_reg1,
        overall_recruitment_status_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

# Completion date

## Descriptive statistics

### Main analysis

#### Count of observations included in the analysis

This is limited to confirmed cross-registrations with a date in both registries (i.e. when we had missing data in one or more registries, this was excluded from the analysis). Additionally, we filtered for overall recruitment status = Completed for both registries.

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg1))

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg2))
```

For registry1 (EUCTR), there were 191 pairs that were confirmed cross-registrations and no missing data on `completion_month_year_reg1`. For registry 2 (ClinicalTrials.gov or DRKS), all observations had data for `completion_month_year_reg2`. Therefore, the analysis was conducted in 191 pairs.

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg1))

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg1))
```

Of those 191 pairs, 177 were EUCTR-ClinicalTrials.gov and 14 were EUCTR-DRKS.

#### Percentages

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1)) |>
  count(completion_month_year_reg1 == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1)) |>
  count(completion_month_year_reg1 == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1)) |>
  count(completion_month_year_reg1 == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

#### Descriptive statistics of month differences

```{r message = FALSE, warning = FALSE}

# CALCULATION FOR ALL CASES
discrepancy_data |>
  # Filter the data
  filter(
    overall_recruitment_status_reg1 == "Completed",
    overall_recruitment_status_reg2 == "Completed",
    !is.na(completion_month_year_reg1)
  ) |>
  # Calculate the month difference
  mutate(
    month_diff = abs(interval(completion_month_year_reg1, completion_month_year_reg2) %/% months(1))
  ) |>
  # Summarize descriptive statistics
  summarise(
    mean_month_diff = mean(month_diff),
    median_month_diff = median(month_diff),
    sd_month_diff = sd(month_diff),
    min_month_diff = min(month_diff),
    max_month_diff = max(month_diff),
    n = n()
  )

# CALCULATION FOR ONLY DISCREPANT DATES 

discrepancy_data |>
  # Filter the data
  filter(
    overall_recruitment_status_reg1 == "Completed",
    overall_recruitment_status_reg2 == "Completed",
    !is.na(completion_month_year_reg1),
    completion_month_year_reg1 != completion_month_year_reg2
  ) |>
  # Calculate the month difference
  mutate(
    month_diff = abs(interval(completion_month_year_reg1, completion_month_year_reg2) %/% months(1))
  ) |>
  # Summarize descriptive statistics
  summarise(
    mean_month_diff = mean(month_diff),
    median_month_diff = median(month_diff),
    sd_month_diff = sd(month_diff),
    min_month_diff = min(month_diff),
    max_month_diff = max(month_diff),
    n = n()
  )
```

#### Percentage of cases where EUCTR completion date was before/after/same

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_reg1)) |>
  mutate(date_comparison = case_when(
    completion_month_year_reg1 < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_reg1 > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)

#ClinicalTrials.gov
discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_reg1)) |>
  mutate(date_comparison = case_when(
    completion_month_year_reg1 < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_reg1 > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)

#DRKS
discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_reg1)) |>
  mutate(date_comparison = case_when(
    completion_month_year_reg1 < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_reg1 > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)
```

### Sensitivity analysis

This is a sensitivity analysis of completion date, where completion dates in the EUCTR were solely taken from the EU member state protocol (completion dates on EUCTR Results pages were disregarded)."

#### Count of observations included in the analysis

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_protocol) | completion_month_year_protocol == "")

discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(is.na(completion_month_year_reg2))
```

For registry1 (EUCTR), there were 172 pairs that were confirmed cross-registrations and no missing data on `completion_month_year_protocol`. For registry 2 (ClinicalTrials.gov or DRKS), all observations had data. Therefore, the analysis was conducted in 172 pairs.

#### Percentages

```{r message = FALSE, warning = FALSE}

discrepancy_data |>
  filter(!is.na(completion_month_year_protocol)) |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  count(completion_month_year_protocol == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_protocol)) |>
  count(completion_month_year_protocol == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))

discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_protocol)) |>
  count(completion_month_year_protocol == completion_month_year_reg2) |>
  mutate(percentage = round(n / sum(n) * 100, 0))
```

#### Descriptive statistics of month differences

```{r message = FALSE, warning = FALSE}

# CALCULATION FOR ALL CASES
discrepancy_data |>
  # Filter the data
  filter(
    overall_recruitment_status_reg1 == "Completed",
    overall_recruitment_status_reg2 == "Completed",
    !is.na(completion_month_year_protocol)
  ) |>
  # Calculate the month difference
  mutate(
    month_diff = abs(interval(completion_month_year_protocol, completion_month_year_reg2) %/% months(1))
  ) |>
  # Summarize descriptive statistics
  summarise(
    mean_month_diff = mean(month_diff),
    median_month_diff = median(month_diff),
    sd_month_diff = sd(month_diff),
    min_month_diff = min(month_diff),
    max_month_diff = max(month_diff),
    n = n()
  )

# CALCULATION FOR ONLY DISCREPANT DATES 

discrepancy_data |>
  # Filter the data
  filter(
    overall_recruitment_status_reg1 == "Completed",
    overall_recruitment_status_reg2 == "Completed",
    !is.na(completion_month_year_protocol),
    completion_month_year_protocol != completion_month_year_reg2
  ) |>
  # Calculate the month difference
  mutate(
    month_diff = abs(interval(completion_month_year_protocol, completion_month_year_reg2) %/% months(1))
  ) |>
  # Summarize descriptive statistics
  summarise(
    mean_month_diff = mean(month_diff),
    median_month_diff = median(month_diff),
    sd_month_diff = sd(month_diff),
    min_month_diff = min(month_diff),
    max_month_diff = max(month_diff),
    n = n()
  )
```

#### Percentage of cases where EUCTR completion date was before/after/same

```{r message = FALSE, warning = FALSE}

#overall
discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_protocol)) |>
  mutate(date_comparison = case_when(
    completion_month_year_protocol < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_protocol > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)

#ClinicalTrials.gov
discrepancy_data |>
  filter(registry2 == "ClinicalTrials.gov") |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_protocol)) |>
  mutate(date_comparison = case_when(
    completion_month_year_protocol < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_protocol > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)

#DRKS
discrepancy_data |>
  filter(registry2 == "DRKS") |>
  filter(overall_recruitment_status_reg1 == "Completed",
         overall_recruitment_status_reg2 == "Completed",
         !is.na(completion_month_year_protocol)) |>
  mutate(date_comparison = case_when(
    completion_month_year_protocol < completion_month_year_reg2 ~ "Earlier",
    completion_month_year_protocol > completion_month_year_reg2 ~ "Later",
    TRUE ~ "Same")) |>
  count(date_comparison) |>
  mutate(percentage = n / sum(n) * 100)
```

## Figures

### Main analysis plot

```{r message = FALSE, warning = FALSE}

overall_completion_plot <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_reg1) & !is.na(completion_month_year_reg2)) |>
  mutate(completion_month_year_reg1 = as.Date(paste0(completion_month_year_reg1, "-01"), format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"), format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_reg1),
         is_equal = completion_month_year_reg1 == completion_month_year_reg2) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_reg1,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  geom_point(data = . %>% filter(is_equal),
             aes(x = completion_month_year_reg1, shape = "Both match"),
             color = "#e79f31", 
             size = 3.3) +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "top") +  
  labs(x = "Year of completion\n(EUCTR - Other registry)",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("EUCTR", levels = c("EUCTR", "Other registry"))), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("Other registry", levels = c("EUCTR", "Other registry"))), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "Other registry" = "#8cc5e3"),
                     labels = c("EUCTR", "Other registry")) +
  scale_shape_manual(values = c("Both match" = 16), labels = c("Both match" = "Both match")) +
  guides(color = guide_legend(order = 1, override.aes = list(size = 3)),
         shape = guide_legend(order = 2, title = NULL))

print(overall_completion_plot)
```

### Sensitivity analysis plot

```{r message = FALSE, warning = FALSE}

overall_completion_plot2 <- discrepancy_data |>
  filter(overall_recruitment_status_reg1 == "Completed" & overall_recruitment_status_reg2 == "Completed") |>
  filter(!is.na(completion_month_year_protocol) & !is.na(completion_month_year_reg2)) |>
  mutate(completion_month_year_protocol = as.Date(paste0(completion_month_year_protocol, "-01"), format = "%Y-%m-%d"),
         completion_month_year_reg2 = as.Date(paste0(completion_month_year_reg2, "-01"), format = "%Y-%m-%d"),
         time_diff = abs(completion_month_year_reg2 - completion_month_year_protocol),
         is_equal = completion_month_year_protocol == completion_month_year_reg2) |>
  arrange(time_diff) |>
  mutate(trn1 = factor(trn1, levels = trn1)) |>
  ggplot(aes(y = trn1, 
             x = completion_month_year_protocol,
             xend = completion_month_year_reg2)) +
  geom_dumbbell(color = "darkgray",  
                size = 1,            
                dot_guide = FALSE,   
                size_x = 3,          
                size_xend = 3,       
                colour_x = "#3594cc",     
                colour_xend = "#8cc5e3") + 
  geom_point(data = . %>% filter(is_equal),
             aes(x = completion_month_year_protocol, shape = "Both match"),
             color = "#e79f31", 
             size = 3.3) +
  theme_classic() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "top") +  
  labs(x = "Year of completion\n(EUCTR - Other registry)",
       y = "Pairs of cross-registered trials") +  
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("EUCTR", levels = c("EUCTR", "Other registry"))), size = 3) +
  geom_point(aes(x = as.Date(NA), y = NA, color = factor("Other registry", levels = c("EUCTR", "Other registry"))), size = 3) +
  scale_color_manual(name = "Registry",
                     values = c("EUCTR" = "#3594cc", 
                                "Other registry" = "#8cc5e3"),
                     labels = c("EUCTR", "Other registry")) +
  scale_shape_manual(values = c("Both match" = 16), labels = c("Both match" = "Both match")) +
  guides(color = guide_legend(order = 1, override.aes = list(size = 3)),
         shape = guide_legend(order = 2, title = NULL))

print(overall_completion_plot2)
```
